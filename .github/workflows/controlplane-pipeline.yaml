name: Infrastructure Control Plane CI/CD

on:
  push:
    branches: master
  workflow_dispatch:
    inputs:
      TARGET_ENV:
        description: 'Target environment'
        required: true
        default: 'primary'
      ACTION:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - approve-plan
          - reject-plan
          - bigbang_diff
          - bigbang_upgrade

env:
  GITHUB_BASE_URL: https://github.com/DRE-IaC/
  REPOSITORY_NAME: pipeline-testing
  AWS_REGION: us-east-2
  AWS_ROLE_ARN: arn:aws:iam::344565808703:role/controlplane
  TERRAFORM_PLAN_FILE: terraform-plan.tfplan

permissions:
  id-token: write   # Required for OIDC
  contents: read    # Required to checkout the repository
  actions: write    # Required for approval actions

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    env:
      TARGET_ENV: ${{ github.event.inputs.TARGET_ENV || 'primary' }}
      ACTION: ${{ github.event.inputs.ACTION || 'plan' }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Single AWS authentication step using the defined role
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Show caller identity
        run: aws sts get-caller-identity
      
      - name: Install dependencies
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          DESIRED_VERSION=v3.9.3 ./get_helm.sh
          helm plugin install https://github.com/databus23/helm-diff
          pip install --upgrade pip
          sudo apt update
          sudo apt-get install -y gnupg software-properties-common
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-add-repository ppa:ansible/ansible
          sudo apt update
          sudo apt install -y terraform git pax ansible
          pip3 install awscli
          terraform version
          echo "Updates and installs are done"

      # Create AWS config file without using role assumption
      - name: Configure AWS profiles
        run: |
          mkdir -p ~/.aws
          cat << EOF > ~/.aws/config
          [profile controlplane]
          region = ${AWS_REGION}
          output = json
          EOF
          
          # Export the current temporary credentials to the config
          cat << EOF > ~/.aws/credentials
          [controlplane]
          aws_access_key_id = ${AWS_ACCESS_KEY_ID}
          aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}
          aws_session_token = ${AWS_SESSION_TOKEN}
          EOF
          
          # Verify config is created
          ls -la ~/.aws/
          cat ~/.aws/config
          # Don't print credentials for security
          
      - name: Configure EKS access (if needed)
        if: ${{ env.ACTION == 'bigbang_diff' || env.ACTION == 'bigbang_upgrade' }}
        run: |
          aws eks update-kubeconfig --name dre-primary2 --region ${{ env.AWS_REGION }}

      # Set TERM variable to fix tput errors
      - name: Set terminal environment
        run: |
          echo "TERM=xterm" >> $GITHUB_ENV

      # Always run terraform init first, regardless of the action
      - name: Initialize Terraform
        run: |
          ./tf.sh -e ${{ env.TARGET_ENV }} -a init -v true --code-pipeline on
        env:
          TERM: xterm

      # Create directory for plan file
      - name: Create plan directory
        if: ${{ env.ACTION == 'plan' }}
        run: mkdir -p terraform-plans

      - name: Run requested action
        if: ${{ env.ACTION != 'init' && env.ACTION != 'approve-plan' && env.ACTION != 'reject-plan' }}
        run: |
          if [[ "${{ env.ACTION }}" == "plan" ]]; then
            echo "Running 'plan', used to plan the infrastructure deployment."
            ./tf.sh -e ${{ env.TARGET_ENV }} -a plan -o terraform-plans/${{ env.TERRAFORM_PLAN_FILE }} --code-pipeline on
            
            # Create summary of the plan
            echo "## Terraform Plan Complete" >> $GITHUB_STEP_SUMMARY
            echo "To approve this plan, manually trigger this workflow with action 'approve-plan'" >> $GITHUB_STEP_SUMMARY
            echo "To reject this plan, manually trigger this workflow with action 'reject-plan'" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ env.ACTION }}" == "apply" ]]; then
            echo "Running 'apply', used to deploy the infrastructure plan."
            ./tf.sh -e ${{ env.TARGET_ENV }} -a apply --skip-interactive on --code-pipeline on
          fi

          if [[ "${{ env.ACTION }}" == "bigbang_diff" ]]; then
            echo "Running 'bigbang_diff', used to show a diff of the helm charts with the installed charts in the cluster."
            ./tf.sh -e ${{ env.TARGET_ENV }} -a bigbang_diff --skip-interactive on --code-pipeline on
          fi

          if [[ "${{ env.ACTION }}" == "bigbang_upgrade" ]]; then
            echo "Running 'bigbang_upgrade', used to do a helm upgrade-install on all helm charts for our cluster."
            ./tf.sh -e ${{ env.TARGET_ENV }} -a bigbang_upgrade --skip-interactive on --code-pipeline on
          fi
        env:
          TERM: xterm

      # Upload plan artifact if we're in plan mode
      - name: Upload plan artifact
        if: ${{ env.ACTION == 'plan' }}
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform-plans/${{ env.TERRAFORM_PLAN_FILE }}
          retention-days: 1

      # Handle approval workflow
      - name: Request Manual Approval
        if: ${{ env.ACTION == 'plan' }}
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ github.actor }}
          minimum-approvals: 1
          issue-title: "Approve or Reject Terraform Plan"
          issue-body: |
            A Terraform plan has been generated and requires your approval before applying.
            
            To approve and apply the plan:
            - Trigger the workflow manually and select 'approve-plan'
            
            To reject and cancel the deployment:
            - Trigger the workflow manually and select 'reject-plan'

      # Download and apply the plan if we're in approve-plan mode
      - name: Download plan file
        if: ${{ env.ACTION == 'approve-plan' }}
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: terraform-plans

      - name: Apply Approved Plan
        if: ${{ env.ACTION == 'approve-plan' }}
        run: |
          echo "Applying previously generated plan"
          ./tf.sh -e ${{ env.TARGET_ENV }} -a apply -i terraform-plans/${{ env.TERRAFORM_PLAN_FILE }} --skip-interactive on --code-pipeline on
        env:
          TERM: xterm

      # Cancel workflow if plan is rejected
      - name: Cancel Workflow
        if: ${{ env.ACTION == 'reject-plan' }}
        run: |
          echo "Terraform plan has been rejected. Workflow is being canceled."
          echo "## Plan Rejected" >> $GITHUB_STEP_SUMMARY
          echo "The Terraform plan has been rejected and will not be applied." >> $GITHUB_STEP_SUMMARY
          exit 1

      # Upload all artifacts at the end
      - name: Upload artifacts
        if: ${{ env.ACTION != 'reject-plan' }}
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ./**/*