name: Infrastructure Control Plane CI/CD

on:
  push:
    branches: master
  workflow_dispatch:
    inputs:
      TARGET_ENV:
        description: 'Target environment'
        required: true
        default: 'sandbox'
        type: choice
        options:
          - sandbox
          - primary
      ACTION:
        description: 'Action to perform'
        required: true
        default: 'full-deploy'
        type: choice
        options:
          - init-only
          - plan-only
          - apply-only
          - bigbang_diff
          - bigbang_upgrade
          - full-deploy

env:
  GITHUB_BASE_URL: https://github.com/DRE-IaC/
  REPOSITORY_NAME: pipeline-testing
  AWS_REGION: us-east-2
  AWS_ROLE_ARN: arn:aws:iam::344565808703:role/controlplane
  TERM: xterm-256color

permissions:
  id-token: write   # Required for OIDC
  contents: read    # Required to checkout the repository

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    env:
      TARGET_ENV: ${{ github.event.inputs.TARGET_ENV || 'sandbox' }}
      ACTION: ${{ github.event.inputs.ACTION || 'full-deploy' }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate environment variable
        run: |
          if [[ "$TARGET_ENV" != "sandbox" && "$TARGET_ENV" != "primary" ]]; then
            echo "Error: TARGET_ENV must be either 'sandbox' or 'primary'"
            exit 1
          fi

      # Single AWS authentication step using the defined role
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Show caller identity
        run: aws sts get-caller-identity
      
      - name: Install dependencies
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          DESIRED_VERSION=v3.9.3 ./get_helm.sh
          helm plugin install https://github.com/databus23/helm-diff || true
          pip install --upgrade pip
          sudo apt update
          sudo apt-get install -y gnupg software-properties-common
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-add-repository ppa:ansible/ansible
          sudo apt update
          sudo apt install -y terraform git pax ansible
          pip3 install awscli
          terraform version
          echo "Updates and installs are done"

      # Modify tf.sh to not require AWS profile if needed
      - name: Prepare tf.sh script
        run: |
          # Check if tf.sh exists
          if [ -f "./tf.sh" ]; then
            # Make a backup
            cp ./tf.sh ./tf.sh.bak
            
            # Make tf.sh executable
            chmod +x ./tf.sh
            
            # Modify tf.sh if needed to handle GitHub Actions environment
            # This is a quick fix - you may need to adjust this based on your actual tf.sh script
            sed -i 's/tput setaf/[ -t 1 ] \&\& tput setaf/g' ./tf.sh || true
            sed -i 's/tput sgr0/[ -t 1 ] \&\& tput sgr0/g' ./tf.sh || true
            
            # If your tf.sh is using AWS profiles explicitly, you might need to modify that too
            # Example (modify as needed):
            sed -i 's/--profile sandbox/--profile default/g' ./tf.sh || true
            sed -i 's/--profile primary/--profile default/g' ./tf.sh || true
          else
            echo "Warning: tf.sh not found, script modification step skipped"
          fi

      - name: Configure EKS access (if needed)
        if: ${{ env.ACTION == 'bigbang_diff' || env.ACTION == 'bigbang_upgrade' || env.ACTION == 'full-deploy' }}
        run: |
          aws eks update-kubeconfig --name dre-primary2 --region ${{ env.AWS_REGION }} || echo "EKS config update skipped or failed"

      # Initialize repository (always done for full-deploy, or when init-only is specified)
      - name: Initialize repository
        if: ${{ env.ACTION == 'init-only' || env.ACTION == 'full-deploy' }}
        run: |
          # Set TF_VAR_assume_role_arn to match AWS_ROLE_ARN for compatibility
          export TF_VAR_assume_role_arn=${{ env.AWS_ROLE_ARN }}
          
          # Debug
          echo "Running init for $TARGET_ENV environment"
          echo "Current directory: $(pwd)"
          ls -la
          
          # Run with verbose output
          ./tf.sh -e $TARGET_ENV -a init -v true --skip-interactive on --code-pipeline on
          
          echo "Init completed"

      # Plan step (run after init in full-deploy, or when plan-only is specified)
      - name: Plan infrastructure
        if: ${{ env.ACTION == 'plan-only' || env.ACTION == 'full-deploy' }}
        run: |
          export TF_VAR_assume_role_arn=${{ env.AWS_ROLE_ARN }}
          echo "Running plan for $TARGET_ENV environment"
          ./tf.sh -e $TARGET_ENV -a plan --skip-interactive on --code-pipeline on
          echo "Plan completed"

      # Apply step (run after plan in full-deploy, or when apply-only is specified)
      - name: Apply infrastructure
        if: ${{ env.ACTION == 'apply-only' || env.ACTION == 'full-deploy' }}
        run: |
          export TF_VAR_assume_role_arn=${{ env.AWS_ROLE_ARN }}
          echo "Running apply for $TARGET_ENV environment"
          ./tf.sh -e $TARGET_ENV -a apply --skip-interactive on --code-pipeline on
          echo "Apply completed"

      # Additional actions
      - name: Run bigbang diff
        if: ${{ env.ACTION == 'bigbang_diff' }}
        run: |
          export TF_VAR_assume_role_arn=${{ env.AWS_ROLE_ARN }}
          echo "Running bigbang_diff for $TARGET_ENV environment"
          ./tf.sh -e $TARGET_ENV -a bigbang_diff --skip-interactive on --code-pipeline on
          echo "Bigbang diff completed"

      - name: Run bigbang upgrade
        if: ${{ env.ACTION == 'bigbang_upgrade' }}
        run: |
          export TF_VAR_assume_role_arn=${{ env.AWS_ROLE_ARN }}
          echo "Running bigbang_upgrade for $TARGET_ENV environment"
          ./tf.sh -e $TARGET_ENV -a bigbang_upgrade --skip-interactive on --code-pipeline on
          echo "Bigbang upgrade completed"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ./**/*